package main

import (
	"fmt"

	"github.com/angusgmorrison/sedgewick_algorithms/struct/stack"
)

func main() {
	fmt.Println(isGenerable([]int{4, 3, 2, 1, 0, 9, 8, 7, 6, 5}))
	fmt.Println(isGenerable([]int{4, 6, 8, 7, 5, 3, 2, 9, 0, 1}))
	fmt.Println(isGenerable([]int{2, 5, 6, 7, 4, 8, 9, 3, 1, 0}))
	fmt.Println(isGenerable([]int{4, 3, 2, 1, 0, 5, 6, 7, 8, 9}))
	fmt.Println(isGenerable([]int{1, 2, 3, 4, 5, 6, 9, 8, 7, 0}))
	fmt.Println(isGenerable([]int{0, 4, 6, 5, 3, 8, 1, 7, 2, 9}))
	fmt.Println(isGenerable([]int{1, 4, 7, 9, 8, 6, 5, 3, 0, 2}))
	fmt.Println(isGenerable([]int{2, 1, 4, 3, 6, 5, 8, 7, 9, 0}))
}

func wouldUnderflow(seq []string) bool {
	var count int
	for _, s := range seq {
		if s == "-" {
			count--
		} else {
			count++
		}
	}

	return count < 0
}

// To test whether a sequence is generable, we attempt to generate it, pushing monotonically
// increasing elements [0,len(seq)) onto a stack and popping them off as indicated by the current
// value of the sequence being processed. The order in which elements are popped should match seq.
func isGenerable(seq []int) bool {
	s := stack.NewSliceStack[int]()
	var nextPush int
	for _, n := range seq {
		// When n was popped from the original stack, it must have been the top element. Hence,
		// we push monotonically increasing elements onto the stack until the top element is n.
		for nextPush <= n {
			s.Push(nextPush)
			nextPush++
		}

		// If s is empty, or the top element isn't the one required by the sequence, we know that
		// the sequence couldn't have been generated by a series of Push and Pop calls.
		val, ok := s.Pop()
		if !ok || val != n {
			return false
		}
	}

	return true
}
